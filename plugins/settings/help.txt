###################### pyTivo Web Admin Help #########################
#
# Description: This file contains the information displayed in the
# settings help section of the web admin. Most users will never need
# to edit or view this file.
#
# Format: Blank lines and lines beginning with '#' are ignored.
# The name of a section should appear on its own line and should NOT
# contain a colon.  Subsequent lines should contain the portion to be
# bolded, followed by a colon, followed by the descriptive text.
# Each line will be read into the previously named section until a
# blank line or the EOF is reached. Lines containing colons that
# don't mark a new subhead must be escaped by placing '>' in the
# first position.
#
# In order for the web config plugin to know which settings are 
# available in which sections, the following line should be present in 
# each setting:
#
# Available In:
#
# This entry should be a comma seperated list of the sections which
# this setting should be shown in. For example:
#
# Available In: Server, Tivos, HD_tivos, SD_tivos, Shares
#
######################################################################

Instructions

To Edit a Share: Select the share in the left hand menu.
To Delete a Share: Select the share in the left hand menu and click 
delete.
To Add a Share/Tivo/Section: Click the "Add Section" button.  Then 
provide the name of the share or TiVo. You must save your changes before 
you can edit settings in the new share.
To Add a Setting: Select your share first.  If the setting is a known 
setting simply add the value to the appropriate setting. If the setting 
is not listed you can add a "User Defined Setting".  Simple click add 
setting and provide the name and value of this new setting.
To Delete a Setting: Delete the value of the setting so that it is 
blank.  If this is a known share the name will remain after a save. If 
the setting is a user defined setting the name will be deleted after the 
save.
Save Settings: Clicking Save Settings will write your changes to the 
pyTivo.conf file. These settings will not have an effect on your pyTivo 
server until it is Soft Reset or restarted.
Soft Reset: Soft Reset allows your new settings to take effect without 
manually restarting the TiVo.  The Soft Reset will cause a re-read of 
the pyTivo.conf file so your changes must be saved to the file before 
the reset.
Note: The only setting that will not take effect until a hard restart is 
the Port setting.  Changing the Port setting requires a full restart.

Add_a_New_Section

Add the name of a new section: If you want to add a TiVo section, 
remember it must start with "_tivo_". You must save your settings before 
the new section will be editable.

port

Default Setting: 9032
Valid Entries: 1-65535
Required: No
Skill: Basic
Description: The port which pyTivo uses to serve your files. Can be
changed if it conflicts with another program.
Example Settings: 9032
Available In: Server

ffmpeg

Default Setting: None
Valid Entries: Operating system path
Required: No
Skill: Basic
Description: This is the full path to your ffmpeg binary. If not set, 
pyTivo checks for it in a "bin" subdirectory, and then in the PATH. If 
no ffmpeg is found, pyTivo will operate in a limited mode, serving only 
MPEG and TiVo files in video shares, and only MP3 files in music shares, 
with no seek capability.
Example Settings: Linux = /usr/bin/ffmpeg |
>Windows = c:\Program Files\pyTivo\bin\ffmpeg.exe
Available In: Server

tivodecode

Default Setting: None
Valid Entries: Operating system path
Required: No
Skill: Basic
Description: This is the full path to your tivodecode binary. If not 
set, pyTivo checks for it in a "bin" subdirectory, and then in the PATH.
tivodecode is only needed for certain functions (currently pushing .TiVo 
files or transcoding HD .TiVo files to SD).
Example Settings: Linux = /usr/bin/tivodecode |
>Windows = c:\Program Files\pyTivo\bin\tivodecode.exe
Available In: Server

tdcat

Default Setting: None
Valid Entries: Operating system path
Required: No
Skill: Basic
Description: This is the full path to your tdcat binary. If not set, 
pyTivo checks for it in a "bin" subdirectory, and then in the PATH. 
tdcat is only needed to view the data from a .TiVo file in the details 
screen. It comes with tivodecode.
Example Settings: Linux = /usr/bin/tdcat |
>Windows = c:\Program Files\pyTivo\bin\tdcat.exe
Available In: Server

beacon

Default Setting: 255.255.255.255
Valid Entries: Beacon IP address(es) or "listen".  Can contain multiple
IPs separated by spaces.
Required: No
Skill: Advanced
Description: The addresses on which the beacon should broadcast.  Most
people can leave this at the default. If set to "listen", will accept
incoming TCP beacons. If you're having issues with your shares not
appearing on TiVo, try using the broadcast address of your LAN. For
example, if your gateway (router) used address 192.168.1.1, your
broadcast address would be 192.168.1.255.  Alternatively, you can
specify the exact addresses of your TiVos, e.g. 192.168.1.150
192.168.1.151.
Example Settings: 192.168.1.255
Available In: Server

debug

Default Setting: True
Valid Entries: True/False
Required: No
Skill: Advanced
Description: Will generate more output for debugging purposes.
Example Settings: True/False
Available In: Server

type

Default Setting: None
Valid Entries: video, music, photo, or any other valid plugin name.
Required: Yes
Skill: Basic
Description: Sets the type of share that this will be. This must be set
to something otherwise pyTivo will not start. NOTE plugins names are
generally lowercase.
Example Settings: video, music, photo
Available In: Shares

path

Default Setting: None
Valid Entries: Any operating system path
Required: Yes
Skill: Basic
Description: Sets the base path to your media content. While pyTivo will
start with an invalid path your shares will not work at all.
Example Settings: Windows = C:\videos | Linux = /home/user/media
Available In: Shares

force_alpha

Default Setting: False
Valid Entries: True/False
Required: No
Skill: Basic
Description: Only meaningful in shares of type "video". When false, 
pyTivo will display videos in the order requested by the TiVo, as 
described at the bottom of the screen. When true, pyTivo will ignore the 
sort options and revert to its "classic" behavior, using an alphabetical 
sort always, with folders listed first. Note that the TiVo doesn't 
request alpha sorts for folders below the top level, so if you want them 
alpha-sorted, you need this option.
Example Settings: True/False
Available In: Shares

precache

Default Setting: False
Valid Entries: True/False
Required: No
Skill: Moderate
Description: In order to verify that the video files present on your
computer were compatible with ffmpeg in older versions pyTivo would
query ffmpeg for each file. While this information was cached it still
caused a delay in the initial loading of a list of files. This precache
setting forced pyTivo to inspect each video prior to starting the pyTivo
server. However, this had two drawbacks. 1. It took time as much as two
minutes before pyTivo was ready to accept requests. 2. It did not update
the cache if new files were added while the pyTivo server was
running.<br><br>
In the more recent releases, anything after Feb 16, 2008, pyTivo no
longer needs to query ffmpeg when creating a file list. Instead pyTivo
has a list of accepted video format extensions. If the file extension
falls within this list it is displayed on the TiVo. This achieves the
same speed increase as the precache method without the delay in loading
the pyTivo server.<br><br>
There are still two drawbacks to this method. 1. The video file must
have an extension that is in the list. There is a possibility that a new
video file extension could come out before pyTivo is updated. 2.
Incomplete or video files with errors will still appear in the TiVo
listing if they have the correct extension, even though they are not
valid files. Both of these concerns are minimal. 1. Very few new formats
of video files come out very often. And all extensions are stored in the
video.ext file which is easily edited. 2. When viewing the file details
before transferring the pyTivo server queries ffmpeg to make sure it is
valid. If the file is not valid it will show up as a copyrighted file
and transferring it will be prevented by TiVo.<br><br>
It is recommended that you leave precaching turned off as it is no
longer needed.
Example Settings: True/False
Available In: Shares

optres

Default Setting: False
Valid Entries: True/False
Required: No
Skill: Moderate
Description: Allows for the use of the Optimal Resolution in
transcoding. By setting optres = true pyTivo will treat the height and
width settings in the conf file as a maximum. If the video to be
transcoded has smaller dimensions that are closer to other acceptable
TiVo dimensions then pyTivo will use these dimensions. This allows for
faster transcoding and small files when the initial video is a lower
quality. pyTivo uses the same resolution as the source file on HD Tivos
for optimal transcoding efficiency. It is not necessay to to set this
option with HD TiVos unles you wish to force pyTivo to change the
resolution to an "S2 compatible" resolution.
Example Settings: True/False
Available In: Tivos, HD_tivos, SD_tivos

par

Default Setting: 1.0
Valid Entries: any valid par
Required: No
Skill: Very Advanced
Description: Set pixel aspect ratio. Applies to S3 Tivos only. OPTRES
must be false to use PAR. For some videofiles (e.g., AVC files), ffmpeg
>cannot determine the pixel aspect ratio correctly and assumes 1:1 which
leads to a distorted image on anamorphically encoded video files. This
setting allows you to override this default. If you do not understand
this setting, and you observe no distortions, you can ignore it. Set
par=1.0 to tell pyTivo to automatically adjust the pixel aspect ratio
whenever possible.<br><br>
>par=1.18518519 (32:27, usually the correct setting for wide-screen
anamorphically encoded DVD content)<br><br>
>par=0.88888889 (8:9, usually the correct setting for anamorphically
encoded DVDs from TV shows)
Example Settings: 1.0, 1.18518519, 0.88888889
Alternative option: Specify par in metadata txt files by adding
>"Override_par : x.xxxx" to a metadata file associated with the video
file.  If all files in the folder have the same par, add the option to a
file called default.txt instead of creating individual metadata files.
Available In: Server

video_fps

Default Setting: 29.97 for S2 Tivo, same as source for S3/HD TiVo
Valid Entries: 29.97, 23.98, 25, 59.94
Required: No
Skill: Advanced
Description: Sets the frame rate used by ffmpeg. pyTivo uses 29.97 for
S2's, and uses the same frame rate as the source on HD TiVos. The
default setting should work fine for most transfers.
Example Settings: 29.97, 23.98, 25, 59.94
Available In: Tivos, HD_tivos, SD_tivos

video_br

Default Setting: 4096K for SD TiVo's, 16384K for HD TiVo's
Valid Entries: Any valid Bit rate. 1024K = 1Mi
Required: No
Skill: Advanced
Description: This allows you to choose the default server video bit rate
used in transcoding. FFmpeg does not strictly follow this bit rate,
there is a certain level of tolerance that is allowed. Also a low
quality file will always have a low bit rate. The default is likely fine
for most users. Higher values may slow down transcoding and will
increase the file size. Increased file sizes take up more room on the
TiVo and take longer to transfer over the network. (Higher settings are
>recommended for screen sizes above 47" such as: video_br=20Mi, width=1920,
height=1080)
Example Settings: 4096K, 8Mi, 12Mi, 16Mi, 20Mi
Available In: Tivos, HD_tivos, SD_tivos

video_pct

Default Setting: 85 (percent of source bitrate)
Valid Entries: Any number (set this to 0 to disable this option)
Required: No
Skill: Advanced
Description: This sets video_br to a percent of the source video
bitrate.  pyTivo will multiply the source video bitrate by this
percentage setting, compare it to the video_br setting and use whichever
is greater as the video_br.  This allows for setting higher bitrates
automatically when transcoding High Definition sources.  For example, if
your source file has a bitrate of 22000k and video_pct is set to 70,
pyTivo will use 15400k for video_br instead of the default 8192k
setting.  With this setting enabled, the video_br setting essentially
becomes the minimum video bitrate.  This setting only applies to S3
tivos.
Example Settings: 60, 70, 85, 100, 125
Available In: Tivos, HD_tivos, SD_tivos

max_video_br

Default Setting: 30000k
Valid Entries: Any valid Bit rate. 1024K = 1Mi
Required: No
Skill: Advanced
Description: This allows you to choose the maximum bit rate and is more
strict than the video_br setting above. However setting this can cause
buffer overflows and can cause issues with ffmpeg. In addition to
setting the ffmpeg maxrate option, this setting is used to determine if
the video bitrate of the source video file is too high for the TiVo.
Otherwise compatible mpeg's with a video bitrate above this setting will
be transcoded rather than sent to the TiVo untouched.  Lower this
setting below the bitrate of your source file if you wish to force high
bitrate sources to be transcoded.  Recommended only for skilled users.
Note: there is a report that ffmpeg throws an error with 17Mi but
accepts 17408K just fine.
Example Settings: 17408k, 30000k
Available In: Tivos, HD_tivos, SD_tivos

bufsize

Default Setting: 1024k for S2, 4096k for S3
Valid Entries: Any valid byte size
Required: No
Skill: Very Advanced
Description: Allows you to set the buffer size used by ffmpeg.
Increasing this setting will allow higher bitrates during transcoding
(see video_br setting), especially when transcoding to HD resolutions.
But it may result in pixelation or audio sync issues with some sources.
1024k is fine for the resolutions used by S2 tivos.  But 2048k or 4096k
is preferred for HD tivos.  Leave this setting blank unless you are
experiencing audio/video sync issues and wish to test a different value.
Example Settings: 1024k, 2048k, 4096k
Available In: Tivos, HD_tivos, SD_tivos

width

Default Setting: 544 for S2, 1920 for S3
Valid Entries: Any valid pixel dimension. Setting will be rounded to
nearest acceptable TiVo dimension.
Required: No
Skill: Moderate
Description: Allows you to choose the output dimension of the transcoded
videos. SD units are limited to 720 and below. Likely HD users will want
to choose a higher value. Higher values may slow down transcoding and
will increase the file size. Increased file sizes take up more room on
the TiVo and take longer to transfer over the network.
Example Settings: 1920, 1440, 1280, 720, 704, 544, 480, 352.
Available In: Tivos, HD_tivos, SD_tivos

height

Default Setting: 480 for S2, 1080 for S3
Valid Entries: Any valid pixel dimension. Setting will be rounded to
nearest acceptable TiVo dimension
Required: No
Skill: Moderate
Description: Allows you to choose the output dimension of the transcoded
videos. SD units are limited to 480 and below. Likely HD users will want
to choose a higher value. Higher values may slow down transcoding and
will increase the file size. Increased file sizes take up more room on
the TiVo and take longer to transfer over the network.
Example Settings: 1080, 720, 480
Available In: Tivos, HD_tivos, SD_tivos

audio_br

Default Setting: same bitrate as source or 448k
Valid Entries: Any valid bitrate up to 448k
Required: No
Skill: Advanced
Description: This allows you to choose the default audio bit rate used
for transcoding. The default is likely fine for most users. 384k is the
minimum recommended for ac3 audio. For S2 Tivos, you may want to lower
this setting to 192k and set audio_ch=2 to slightly reduce the file
size. See audio_codec for more info.
Example Settings: 192K, 384K, 448K.
Available In: Tivos, HD_tivos, SD_tivos

max_audio_br

Default Setting: 448k
Valid Entries: Any valid bitrate
Required: No
Skill: Advanced
Description: This sets the maximum audio bit rate that can be sent to
the TiVo. Files having a higher bit rate will be transcoded to ensure
TiVo compatibility.
Example Settings: 384K, 448K
Available In: Tivos, HD_tivos, SD_tivos

audio_fr

Default Setting: same frequency as source
Valid Entries: 44100, 48000
Required: No
Skill: Advanced
Description: Sets the audio sampling frequency. Defaults to frequency of
the source file for better audio sync if it is 44100 or 48000. Otherwise
48000 is used.
Example Settings: 44100, 48000
Available In: Tivos, HD_tivos, SD_tivos

audio_ch

Default Setting: same channels as source
Valid Entries: any number compatible with ffmpeg and the audio codec selected
Required: No
Skill: Advanced
Description: Sets the number of audio channels used by ffmpeg. ffmpeg
will retain the same number of channels as the source file by default.
The default setting should work fine for most transfers unless the
default audio_codec is changed. Change this setting to 2 if you do not
want to retain 5.1 audio. A bug in ffmpeg will sometimes move the center
audio channel to the left or right speaker. Setting this option to 2, on
an as needed basis, or permanently, will correct this at the loss of 5.1
audio. But this should only be necessary on rare occasions where the
source file is an mkv or xvid with ac3 5.1 audio bitrate above 448k.
Example Settings: 2, 6
Available In: Tivos, HD_tivos, SD_tivos

audio_codec

Default Setting: ac3 or copy
Valid Entries: mp2, ac3
Required: No
Skill: Advanced
Description: Sets the audio codec used by ffmpeg during transcoding.
pyTivo defaults to ac3 in order to retain 5.1 audio should the source
contain it. pyTivo also checks the audio codec and bitrate of the source
and uses '-acodec copy' if it is compatible. Otherwise the Default
Setting is used. Specifying an audio codec will disable these features
and pyTivo will re-encode all audio using the codec specified.<br><br>
Allowing pyTivo to select '-acodec copy' whenever possible will
generally produce the best results. This is meant to eliminate garbled
audio during transcoding when the source contains audio glitches that
cause ffmpeg to lose synchronization. This will also prevent the center
audio channel from being moved to the right front speaker by ffmpeg when
transferring mkv's and xvid's with audio bitrate of 448k or
less.<br><br>
You may want to change this setting to mp2 if you only have an S2, or
have specified a per tivo section for an S2, and do not wish to retain
5.1 audio for possible transfer to an S3 Tivo or back to the PC should
the need arise. This will slightly reduce the amount of disk space used
and allow for more recordings on an S2 Tivo. In this case, you will want
to specify audio_codec=mp2, audio_ch=2, and audio_br=192k. These are the
settings normally used by the S2 for recordings.
Example Settings: mp2, ac3
Available In: Tivos, HD_tivos, SD_tivos

audio_lang

Recommended Setting: 5.1, DTS, en  (entire string including commas)
pyTivo Defaults To: first audio stream
Valid Entries: any language tag or audio stream number reported by ffmpeg
Required: No
Skill: Basic
Description: Sets the preferred language track used by pyTivo.
ffmpeg/pytivo defaults to the first audio stream.  Specifying this
parameter, tells pyTivo to use the first audio stream that matches this
entry if more than one audio stream exists.  If your video source does
not have language tags, you may specify the audio stream number reported
by ffmpeg (ie. 0.1, 0.2 ect.). Stream references like 0x80, 0x81, etc.
may also be specified.  pyTivo will transcode the file if necessary to
obtain the preferred language track.<br><br>
You can also assign new language tags to your files by adding Override
lines to your metadata txt files.  This will enable pytivo to detect
your audio language setting in files that do not contain language tags.
The syntax is<br>
Override_mapAudio 0.1 colon eng (replace the word colon with a colon)<br>
Where 0.1 is the audio stream number reported by ffmpeg and eng is the
new audio tag to assign to that stream.  Add a separate Override line
for each audio stream that you want to replace with a new tag.
Example Settings: eng, ger, spa, en, ge, 0.0, 0.1, 0.2, 0x80, 0x81 etc...
Available In: Tivos, HD_tivos, SD_tivos

copy_ts

Default Setting: True
Valid Entries: True/False
Required: No
Skill: Basic
Description: Adds the copy timestamps setting (-copyts) to the ffmpeg
command.  This setting helps correct audio synchronization problems that
commonly occur during transcoding.  You can leave this field blank
unless you wish to disable it. pyTivo defaults to True except when
pyTivo uses acodec copy, in which case copyts is not needed, and a
conflict could also occur if the source file has really corrupt
sections.
Example Settings: True, False
Available In: Tivos, HD_tivos, SD_tivos

ffmpeg_threads

Default Setting: None
Valid Entries: Any number up to 16 that represents the number of CPU threads FFmpeg has access to.
Required: No
Skill: Very Advanced
Description:  Using multiple threads with FFmpeg if your CPU has them can speed up transcoding time.  Using a setting of '2' for a dual core CPU may show increased transcoding speeds of 10% or more.  If you have a dual core CPU with hyperthreading then the setting might be '4'.   There is a diminishing return for this setting so make sure to set this to no more than the amount of threads your CPU is capable of handling.  After a certain point the TiVo is the limiting speed factor.
Example Settings: Any number from 1 to 16
Available In: Server

ffmpeg_pram

Default Setting: None
Valid Entries: A valid ffmpeg command
Required: No
Skill: Very Advanced
Description: This allows you to append additional raw ffmpeg commands to
the ffmpeg template.
Example Settings: A valid FFmpeg command
Available In: Server, Tivos, HD_tivos, SD_tivos

ffmpeg_tmpl

Default Setting: %(video_codec)s %(video_fps)s %(video_br)s
%(max_video_br)s %(buff_size)s %(aspect_ratio)s
%(audio_br)s %(audio_fr)s %(audio_ch)s %(audio_codec)s %(audio_lang)s
%(ffmpeg_pram)s %(format)s
Valid Entries: A valid ffmpeg command
Required: No
Skill: Very Advanced
Description: This is a template used by pyTivo to control the parameters
passed to ffmpeg. It should not be necessary to modify this template
unless there is a particular parameter you do not wish ffmpeg to use and
it cannot be overridden by specifying that parameter in the pyTivo.conf
file.
Example Settings: See Above and the forum.
Available In: Server, Tivos, HD_tivos, SD_tivos

aspect169

Default Setting: True
Valid Entries: True/False
Required: No
Skill: Moderate
Description: Most TiVos, even S2, can handle 16:9 videos perfectly. Some
>S2s are known not to handle 16:9 and will default to false in this
setting. If you are experiencing major distortion you can try setting
this to false. Likely most users will not have to mess with this.
Example Settings: True/False
Available In: Tivos

shares

Default Setting: None (allow all shares on this TiVo).
Valid Entries: The names of any shares in your pyTivo.conf file, in a
comma-separated list.
Required: No
Skill: Easy
Description: Only the shares listed in this setting will be visible on 
this TiVo. Will ignore invalid shares. If no valid shares are listed, no 
shares will be visible on this TiVo. If the "shares" line is not 
present, all shares are visible.
Example Settings: Movies, Kids Stuff
Available In: Tivos

ffmpeg_wait

Default Setting: 10 (seconds)
Valid Entries: any integer
Required: No
Skill: Advanced
Description: Slow computers or NAS servers may result in pytivo
reporting supported videos as not supported (copy protected).
Increasing this setting will give ffmpeg more time to scan the file.
Example Settings: 10, 15, 20.
Available In: Server

tivo_username

Default Setting: None
Valid Entries: tivo.com username
Required: No
Skill: Basic
Description: Your username (email address) at tivo.com. This is required 
for the "Push" feature. If you don't plan to use Push, you don't need to 
set this.
Example Settings: user@example.com
Available In: Server

tivo_password

Default Setting: None
Valid Entries: tivo.com password
Required: No
Skill: Basic
Description: Your password at tivo.com. This is required for the "Push" 
feature. If you don't plan to use Push, you don't need to set this.
Example Settings: password
Available In: Server

tivo_mind

Default Setting: mind.tivo.com:8181
Valid Entries: address:port
Required: No
Skill: Moderate
Description: The TiVo "mind" server and port to use. This is the server 
that pyTivo connects to in order to make Push requests. For most users 
in the U.S., the default is the correct value. Australian users will 
need to use "symind", while users in a beta program need "stagingmind".
Example Settings: symind.tivo.com:8181
Available In: Server

tivo_mak

Default Setting: None
Valid Entries: Your Media Access Key
Required: No
Skill: Basic
Description: Your Media Access Key -- find it on your TiVo under 
Messages and Settings, Account and System information, Media Access Key. 
This is required for the "ToGo" feature, and for anything that uses 
tivodecode (pushing .TiVo files, transcoding HD .TiVo files to SD 
TiVos). If you don't plan to use these features, you don't need to set 
this.
Example Settings: 012345678
Available In: Server

togo_path

Default Setting: None
Valid Entries: System path or share name
Required: No
Skill: Basic
Description: The path used to save programs downloaded via the ToGo 
menu. It can be either a direct path, or the name of a share, in which 
case pyTivo will use the path specified for the share. If you don't plan 
to use the ToGo feature, you need not set this.
Example Settings: My Videos, /home/user/Videos
Available In: Server

zeroconf

Default Setting: Auto
Valid Entries: True/False/Auto
Required: No
Skill: Moderate
Description: Controls whether or not new-style, zeroconf-based beacons 
are used. The default is to use them, unless there's a "_tivo_" section 
with "shares" defined. The zeroconf beacons bypass the usual mechanism 
whereby only the allowed shares are announced to specific TiVos; the 
contents of the shares will still not appear on unauthorized TiVos, but 
the names will.
Example Settings: True/False/Auto
Available In: Server

nosettings

Default Setting: False
Valid Entries: True/False
Required: No
Skill: Basic
Description: Disable the "Web Configuration" (settings) item in the 
infopage (i.e. the very thing you're using now). Note that you can't 
turn this off the way you turned it on, since the settings page will not 
be available! You'll have to remove it from pyTivo.conf with a text 
editor.
Example Settings: True/False
Available In: Server

temp_share

Default Setting: None
Valid Entries: Share name
Required: No
Skill: Moderate
Description: Sets a temporarily share to store your media content 
that is being remuxed before being sent to your TiVo.  If content exists 
on network share, setting this to a local share on the computer running 
pyTivo will significantly speed up the process. If not set or share is not 
valid pyTivo will use the original path of your media content for temporary storage. 
Example Settings: Videos, Movies, TV Shows, etc.
Available In: Server

togo_mpegts

Default Setting: False
Valid Entries: True/False/Default
Required: No
Skill: Moderate
Description: For Tivos that support mpeg-ts transfer. This will enable at tick box on 
the togo screen, when this tick box is ticked pyTivo will transfer files in mpeg-ts format instead 
of the default mpeg-ps. This is necessary if your video content contains h264 encoding. 
True = display tick box. False = do not display tick box. Default = display tick box and 
default to having it ticked.
Example Settings: True/False/Default
Available In: Server
